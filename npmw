#!/bin/bash

##############################################################################
##
##  npmw script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="npmw"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

# Determine the Node.js executable to use.
if [ -n "$NODE_HOME" ] ; then
    if [ -x "$NODE_HOME/node" ] ; then
        NODE="$NODE_HOME/node"
    else
        NODE="$NODE_HOME/bin/node"
    fi
    if [ ! -x "$NODE" ] ; then
        die "ERROR: NODE_HOME is set to an invalid directory: $NODE_HOME

Please set the NODE_HOME variable in your environment to match the
location of your Node.js installation."
    fi
else
    NODE="node"
    which node >/dev/null 2>&1 || die "ERROR: NODE_HOME is not set and no 'node' command could be found in your PATH.

Please set the NODE_HOME variable in your environment to match the
location of your Node.js installation."
fi

# Determine the npm executable to use.
if [ -n "$NODE_HOME" ] ; then
    if [ -x "$NODE_HOME/npm" ] ; then
        NPM="$NODE_HOME/npm"
    else
        NPM="$NODE_HOME/bin/npm"
    fi
    if [ ! -x "$NPM" ] ; then
        NPM="npm"
    fi
else
    NPM="npm"
    which npm >/dev/null 2>&1 || die "ERROR: No 'npm' command could be found in your PATH.

Please ensure npm is installed and accessible from your PATH."
fi

# Check Node.js version
NODE_VERSION=$($NODE --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo "Warning: Node.js version 18 or higher is recommended. Current version: $($NODE --version)"
fi

# Check npm version
NPM_VERSION=$($NPM --version | cut -d'.' -f1)
if [ "$NPM_VERSION" -lt 8 ]; then
    echo "Warning: npm version 8 or higher is recommended. Current version: $($NPM --version)"
fi

# Execute npm with all arguments
exec "$NPM" "$@"